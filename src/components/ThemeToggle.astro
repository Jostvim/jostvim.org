---
// src/components/ThemeToggle.astro
---

<!-- Theme Toggle Switch -->
<div class="theme-toggle">
  <button
    id="themeToggle"
    type="button"
    aria-label="Toggle dark mode"
    aria-pressed="false"
    class="theme-switch relative inline-flex h-12 w-20 items-center justify-center rounded-full border-2 border-indigo-200 dark:border-indigo-500/40 bg-indigo-100 dark:bg-slate-800/80 backdrop-blur-sm transition-all duration-300 hover:bg-indigo-200 dark:hover:bg-slate-700/80 hover:border-purple-400 dark:hover:border-purple-400/60 focus:outline-none focus:ring-2 focus:ring-purple-400/50 focus:border-purple-400 dark:focus:border-purple-400"
  >
    <!-- Background Track -->
    <div class="absolute inset-1 rounded-full bg-gradient-to-r from-indigo-200/80 to-indigo-300/80 dark:from-slate-700/80 dark:to-slate-600/80 transition-all duration-300"></div>

    <!-- Sliding Thumb with Icon -->
    <div class="switch-thumb relative z-10 flex h-8 w-8 items-center justify-center rounded-full bg-white dark:bg-slate-900 shadow-lg transition-transform duration-300 border border-indigo-300 dark:border-indigo-400/60">
      <span class="current-theme-icon text-lg">☀️</span>
    </div>
  </button>
</div>

<script is:inline>
  const themeButton = document.getElementById('themeToggle');
  const thumb = themeButton.querySelector('.switch-thumb');
  const icon = themeButton.querySelector('.current-theme-icon');
  const htmlEl = document.documentElement;

  // Determine initial theme
  const storedTheme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const initialTheme = (storedTheme === 'dark' || storedTheme === 'light')
    ? storedTheme
    : prefersDark ? 'dark' : 'light';

  htmlEl.classList.toggle('dark', initialTheme === 'dark');
  localStorage.setItem('theme', initialTheme);

  // Update thumb position, icon, and ARIA state
  const updateUI = () => {
    const isDark = htmlEl.classList.contains('dark');
    // Slide the thumb via inline style for consistent positioning
    thumb.style.transform = isDark ? 'translateX(16px)' : 'translateX(-16px)';
    // Swap the icon inside the thumb
    icon.textContent = isDark ? '🌙' : '☀️';
    // Update aria-pressed to reflect current state
    themeButton.setAttribute('aria-pressed', isDark);
  };

  updateUI();

  // Toggle handler
  const toggleTheme = (event) => {
    htmlEl.classList.toggle('dark');
    localStorage.setItem('theme', htmlEl.classList.contains('dark') ? 'dark' : 'light');
    updateUI();
    // Remove focus after animation
    setTimeout(() => themeButton.blur(), 300);
  };

  themeButton.addEventListener('click', toggleTheme);
  themeButton.addEventListener('mouseleave', () => setTimeout(() => themeButton.blur(), 100));
</script>
